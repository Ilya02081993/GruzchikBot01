import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta

TOKEN = "8329621184:AAE68wWxjTUsbLNorCPNZrtwDzWhAn3GbVg"
ADMIN_IDS = [123456789, 987654321]  # 495452574

bot = Bot(token=TOKEN)
dp = Dispatcher()

tasks = {}  # {message_id: {"task": str, "user": str or None, "time": datetime}}

@dp.message(Command("task"))
async def create_task(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    text = message.text.replace("/task", "").strip()
    if not text:
        await message.reply("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /task")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data="take_task")

    sent = await message.answer(
        f"üì¶ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n{text}\n\nüïí –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!",
        reply_markup=kb.as_markup()
    )

    tasks[sent.message_id] = {"task": text, "user": None, "time": datetime.now()}

    await asyncio.sleep(15 * 60)
    if tasks.get(sent.message_id) and tasks[sent.message_id]["user"] is None:
        await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:\n{text}")

@dp.callback_query(lambda c: c.data == "take_task")
async def take_task(callback: types.CallbackQuery):
    msg = callback.message
    user = callback.from_user

    if msg.message_id not in tasks or tasks[msg.message_id]["user"]:
        await callback.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤–∑—è—Ç–∞!", show_alert=True)
        return

    tasks[msg.message_id]["user"] = user.username or user.first_name

    await msg.edit_text(
        f"‚úÖ @{user.username or user.first_name} –≤–∑—è–ª(–∞) –∑–∞–¥–∞—á—É:\n{tasks[msg.message_id]['task']}\n\nüïê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å"
    )

    await callback.answer("–¢—ã –≤–∑—è–ª –∑–∞–¥–∞—á—É!")

    await asyncio.sleep(60 * 60)
    if msg.message_id in tasks and tasks[msg.message_id]["user"] == (user.username or user.first_name):
        await msg.answer(f"‚è∞ @{user.username or user.first_name}, –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–µ:\n{tasks[msg.message_id]['task']}?")

@dp.message(Command("tasks"))
async def show_tasks(message: types.Message):
    if not tasks:
        await message.reply("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
    for i, (mid, info) in enumerate(tasks.items(), start=1):
        user = info["user"] or "‚ùå –Ω–µ –≤–∑—è—Ç–∞"
        text += f"{i}. {info['task']} ‚Äî {user}\n"
    await message.reply(text)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
